버전 관리 --
기존에 있던 프로젝트를 깃으로 commit 하여 버전이 달라지는 것을 관리. 프로젝트 상태가 변경되는 정보를 알 수 있다는 것.
git 초기화--
내 pc의 프로젝트를 git이 관리하는 프로젝트로 만들 수 있으며, git으로 관리할 것이라고 설정하는 것. 
add/staging--
commit에 반영할지 안할지는 파일 단위로 선택 가능, commit에 반영할 파일을 선택하는 것. 
commit--
현재의 프로젝트 상태를 저장하는 것 
commit내역--
commit한 순서대로 리스트. 역사 
repo----깃으로 관리되는 프로젝트를 깃에서는 리포지토리(리포)라고 부른다. 로컬 리포와 원격 리포가 있다. 
push---
로컬 repo의 commit 들을 원격 repo에 반영하기 (push)밀어넣기. 원격 repo 에 없는 즉, 새로운 commit 내역들을
모두 원격 repo에 한 번에 반영한다. 

pull--
원격 repo의 commit 들을 로컬 repo로 반영하기(pull) 땡겨오기. 로컬 repo에 없는 즉, 새로운 commit 내역을 모두
로컬 repo에 한 번에 반영한다. 
clone --
원격 repo를 내 컴퓨터에 가져와서 초기 repo 세팅하는 것을 clone(복제하기).

tracking--
로컬 repo와 원격 repo를 연결한다. 

꿀팁 
혼자 Git 프로젝트 작업을 할 때는 pull → 로컬 repo commit → push 순서로 하면 좋아요.
원격 repo 와 로컬 repo 에서 같은 파일을 수정하면 Git 이 같은 파일을 수정했는데 내가 어떤 파일을 최종으로 할까? 라고 확인
메시지를 줍니다. (정확한 내용은 곧 배울꺼에요!) 이런 것을 바로 충돌(conflict)이라고 표현해요.
충돌을 피하기 위해서는 아래 순서를 따라주는 게 편해요. 같은 파일을 동시에 수정해버리면 충돌이 나니까 두 repo 의 상태를 똑
같이 맞춰준 후에 변경작업을 해주는 거에요.
1. 원격 repo 와 로컬 repo 의 상태를 똑같이 맞춰주기, 즉 로컬 repo 에 원격 repo 작업내역 가져오기 ( pull )
2. 로컬 repo 의 작업 내용을 저장하고 ( commit )
3. 원격 repo 에 로컬 repo 내용을 반영 ( push )
원격 repo 에 변경사항이 생겼다! 하면 먼저 pull 하고 로컬 repo 에서 작업하면 많은 경우 충돌을 피할 수 있어요.


1.앞으로 git 프로젝트로 만들어 보고 싶은 것 
git을 이용하여  항해 1주차 협업 프로젝트에 써먹어 보고 싶다. 
2. 1주차 주요 개념 키워드 적어보기 
(버전 관리, git 초기화,  add/staging, commit , commit 내역, repo, pull, push, clone, tracking)
